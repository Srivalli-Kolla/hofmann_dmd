setwd("/Users/cartalop/github/skin_trajectories")
setwd("/Volumes/XF-11/working_datasets/wurzburg/heart/hoffmann_2023/CD45+Cochain")
## Notebook for the conversion of Seurat object to anndata object for trajectyory inference
### Load required packages
library(Seurat)
library(sceasy)
library(reticulate)
use_python("/Users/cartalop/mambaforge/envs/scanpy/bin", required = TRUE)
loompy <- reticulate::import('loompy')
skin_processed <- readRDS(file = 'MDX_MPC.Robj')
#skin_processed <- readRDS(file = 'MDX_MPC.Robj')
skin_processed <- LoadData('MDX_MPC.Robj')
library(Seurat)
library(SeuratData)
devtools::install_github('satijalab/seurat-data')
remotes::install_github('satijalab/seurat-wrappers')
library(Seurat)
library(SeuratData)
library(SeuratWrappers)
library(sceasy)
library(reticulate)
use_python("/Users/cartalop/mambaforge/envs/scanpy/bin", required = TRUE)
loompy <- reticulate::import('loompy')
skin_processed <- LoadData('MDX_MPC.Robj')
setwd("/Volumes/XF-11/working_datasets/wurzburg/heart/hoffmann_2023/CD45+Cochain")
#skin_processed <- readRDS(file = 'MDX_MPC.Robj')
skin_processed <- LoadData('MDX_MPC.Robj')
?readRDS
readRDS(MDX_MPC, file = 'MDX_MPC.Robj')
readRDS(file = 'MDX_MPC.Robj')
readRDS(file = 'MDX_MPC.Robj')
?load
load(file = 'MDX_MPC.Robj')
load(file = 'MDX_POOL_NEW')
sceasy::convertFormat(MDX_MPC, from = "seurat", to = "anndata", outFile = 'MDX_MPC.h5ad')
sceasy::convertFormat(MDX_POOL_NEW, from = "seurat", to = "anndata", outFile = 'MDX_POOL_NEW.h5ad')
setwd("/Users/cartalop/github/hofmann_macro/6-cellular_circuits/1-cellcellcomms/cellchat/targeted/CM3-Immune")
### Load required modules
library(NMF)
library(dplyr)
library(igraph)
library(Matrix)
library(ggplot2)
library(CellChat)
library(patchwork)
library(ggalluvial)
library(reticulate)
library(wordcloud)
library(ComplexHeatmap)
options(stringsAsFactors = FALSE)
#trace(netClustering, edit = TRUE)
use_python("/Users/cartalop/miniforge3/envs/scanpy/bin/", required = TRUE)
### Read in data
cellchat.WT <- readRDS("/Volumes/XF-11/wurzburg/hofmann_2023/DMD-WT_CMC-Immune_cellchat_ctl240711.rds")
cellchat.WT <- updateCellChat(cellchat.WT)
cellchat.WT
cellchat.Mdx <- readRDS("/Volumes/XF-11/wurzburg/hofmann_2023/DMD-Mdx_CMC-Immune_cellchat_ctl240711.rds")
cellchat.Mdx <- updateCellChat(cellchat.Mdx)
cellchat.Mdx
cellchat.MdxSCID <- readRDS("/Volumes/XF-11/wurzburg/hofmann_2023/DMD-MdxSCID_CMC-Immune_cellchat_ctl240711.rds")
cellchat.MdxSCID <- updateCellChat(cellchat.MdxSCID)
cellchat.MdxSCID
### Lift objects to level cell numbers
group.new = levels(cellchat.WT@idents)
cellchat.Mdx <- liftCellChat(cellchat.Mdx, group.new)
group.new = levels(cellchat.WT@idents)
cellchat.MdxSCID <- liftCellChat(cellchat.MdxSCID, group.new)
### Merge objects
object.list <- list(WT = cellchat.WT, Mdx = cellchat.Mdx, MdxSCID = cellchat.MdxSCID)
cellchat <- mergeCellChat(object.list, add.names = names(object.list), cell.prefix = TRUE)
cellchat
df.net <- subsetCommunication(cellchat)
df.net
unique_to_WT <- setdiff(unique(df.net$WT$pathway_name), unique(df.net$Mdx$pathway_name))
unique_to_WT
unique_to_Mdx <- setdiff(unique(df.net$Mdx$pathway_name), unique(df.net$WT$pathway_name))
unique_to_Mdx
unique_to_MdxSCID <- setdiff(unique(df.net$WT$pathway_name), unique(df.net$MdxSCID$pathway_name))
unique_to_MdxSCID
all_unique <- c(unique_to_WT, unique_to_Mdx, unique_to_MdxSCID)
all_unique
### Differential number of interactions or interaction strength among different cell populations
par(mfrow = c(1,2), xpd = TRUE)
netVisual_diffInteraction(cellchat, weight.scale = T)
netVisual_diffInteraction(cellchat, weight.scale = T, measure = "weight")
### Same visualisation but in heatmap mode
gg1 <- netVisual_heatmap(cellchat)
gg2 <- netVisual_heatmap(cellchat, measure = "weight")
gg1 + gg2
weight.max <- getMaxWeight(object.list, attribute = c("idents","count"))
par(mfrow = c(1,3), xpd=TRUE)
for (i in 1:length(object.list)) {
netVisual_circle(object.list[[i]]@net$count, weight.scale = T, label.edge= F, edge.weight.max = weight.max[2], edge.width.max = 12, title.name = paste0("Number of interactions - ", names(object.list)[i]))
}
### Compare the major sources and targets in 2D space
num.link <- sapply(object.list, function(x) {rowSums(x@net$count) + colSums(x@net$count)-diag(x@net$count)})
weight.MinMax <- c(min(num.link), max(num.link)) # control the dot size in the different datasets
gg <- list()
for (i in 1:length(object.list)) {
gg[[i]] <- netAnalysis_signalingRole_scatter(object.list[[i]], title = names(object.list)[i], weight.MinMax = weight.MinMax)
}
patchwork::wrap_plots(plots = gg)
### Visualise which pathways are active in the most significant cell states
gg1 <- netAnalysis_signalingChanges_scatter(cellchat, idents.use = "vCM3", signaling.exclude = "MIF", comparison = c(1,2))
gg2 <- netAnalysis_signalingChanges_scatter(cellchat, idents.use = "vCM3", signaling.exclude = "MIF", comparison = c(1,3))
gg3 <- netAnalysis_signalingChanges_scatter(cellchat, idents.use = "Ly6ChiMo", signaling.exclude = "MIF", comparison = c(1,2))
gg4 <- netAnalysis_signalingChanges_scatter(cellchat, idents.use = "Ly6ChiMo", signaling.exclude = "MIF", comparison = c(1,3))
gg5 <- netAnalysis_signalingChanges_scatter(cellchat, idents.use = "CD8Temra", signaling.exclude = "MIF", comparison = c(1,2))
gg6 <- netAnalysis_signalingChanges_scatter(cellchat, idents.use = "CD8Temra", signaling.exclude = "MIF", comparison = c(1,3))
patchwork::wrap_plots(plots = list(gg1, gg3, gg5, gg2, gg4, gg6))
###Identify signaling groups based on their functional similarity
cellchat <- computeNetSimilarityPairwise(cellchat, type = "functional", comparison = c(1,2,3))
cellchat <- netEmbedding(cellchat, type = "functional", comparison = c(1,2,3))
cellchat <- netClustering(cellchat, type = "functional", comparison = c(1,2,3))
netVisual_embeddingPairwise(cellchat, type = "functional", label.size = 3.5)
###Identify signaling groups based on their structural similarity
cellchat <- computeNetSimilarityPairwise(cellchat, type = "structural", comparison = c(1,2,3,4))
cellchat <- computeNetSimilarityPairwise(cellchat, type = "structural", comparison = c(1,2,3))
cellchat <- netEmbedding(cellchat, type = "structural", comparison = c(1,2,3))
cellchat <- netClustering(cellchat, type = "structural", comparison = c(1,2,3))
netVisual_embeddingPairwise(cellchat, type = "structural", label.size = 3.5)
netVisual_embeddingPairwiseZoomIn(cellchat, type = "structural", nCol = 2)
rankSimilarity(cellchat, type = "functional")
rankSimilarity(cellchat, type = "structural")
gg1 <- rankNet(cellchat, mode = "comparison", stacked = T, do.stat = TRUE, comparison = c(1,2,3))
gg2 <- rankNet(cellchat, mode = "comparison", stacked = F, do.stat = TRUE, comparison = c(1,2,3))
gg1 + gg2
### Compare outgoing (or incoming) signaling associated with each cell population
i = 1
pathway.union <- union(object.list[[i]]@netP$pathways, object.list[[i+1]]@netP$pathways)
ht1 = netAnalysis_signalingRole_heatmap(object.list[[i]], pattern = "outgoing", signaling = pathway.union, title = names(object.list)[i], width = 22, height = 26,   color.heatmap = 'RdPu')
ht2 = netAnalysis_signalingRole_heatmap(object.list[[i+1]], pattern = "outgoing", signaling = pathway.union, title = names(object.list)[i+1], width = 22, height = 26,   color.heatmap = 'RdPu')
draw(ht1 + ht2, ht_gap = unit(0.5, "cm"))
netVisual_bubble(cellchat,
sources.use = c('vCM3'),
targets.use = c('Ly6ChiMo', 'CD8Temra'),
comparison = c(1,2,3),
angle.x = 45)
# define a positive dataset, i.e., the dataset with positive fold change against the other dataset
pos.dataset = "WT"
# define a char name used for storing the results of differential expression analysis
features.name = pos.dataset
# perform differential expression analysis
cellchat <- identifyOverExpressedGenes(cellchat,
group.dataset = "genotype",
pos.dataset = pos.dataset,
features.name = features.name,
only.pos = FALSE,
thresh.pc = 0.1,
thresh.fc = 0.05,
thresh.p = 1)
net <- netMappingDEG(cellchat, features.name = features.name)
